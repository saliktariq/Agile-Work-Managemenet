#include <iostream>
#include "credentials.h"
#include "database.h"
#include "ProjectDAO.h"
#include "Project.h"
#include "KanbanColumnsDAO.h"
#include "KanbanBoardsDAO.h"
#include "UsersDAO.h"
#include "IssuesTypesDAO.h"
#include "issuesDAO.h"

using namespace std;

/* Database credentials*/
std::string host = Credentials::LOCALHOST;
std::string username = Credentials::USERNAME;
std::string password = Credentials::PASSWORD;
std::string databaseName = Credentials::DATABASE_NAME;

/* Instantiating database*/

//Database* db = new Database(host, username, password, databaseName);

std::shared_ptr<Database> db = std::make_shared<Database>(host, username, password, databaseName);


//to be migrated to controller
UsersDAO usersDAO(db);
ProjectsDAO projectDAO(db);
KanbanBoardsDAO kanbanBoardsDAO(db);
KanbanColumnsDAO kanbanColumnsDAO(db);
IssueTypesDAO issueTypesDAO(db);
IssuesDAO issuesDAO(db);


User current_user = User(0, "", "", "", "");
Project current_project = Project(0, "");
KanbanBoard current_board = KanbanBoard(0, "", 0, "", "");

//void connect_db() {
//    /* Database credentials*/
//    string host = Credentials::LOCALHOST;
//    string username = Credentials::USERNAME;
//    string password = Credentials::PASSWORD;
//    string databaseName = Credentials::DATABASE_NAME;
//
//    //Database* db = new Database(host, username, password, databaseName);
//
//    db = make_shared<Database>(host, username, password, databaseName);
//    db->connect();
//
//    //init DAOs
//    usersDAO = UsersDAO(db);
//    projectDAO = ProjectsDAO(db);
//    kanbanBoardsDAO = KanbanBoardsDAO(db);
//    kanbanColumnsDAO = KanbanColumnsDAO(db);
//    issueTypesDAO = IssueTypesDAO(db);
//}

int menu() {

	db->connect();
	int userChoice;

	bool isAuthenticated = false;

	while (!isAuthenticated) {
		cout << "1. Register" << endl;
		cout << "2. Login" << endl;
		cout << "3. Exit" << endl;
		cin >> userChoice;
		string username, full_name, email, role;
		User user = User(0, "", "", "", "");
		bool match = 0;

		switch (userChoice) {
		case 3:
			return 0; // Exit
		case 2:
			isAuthenticated = true; // Assume the user has logged in or registered
			cout << "Enter username" << endl;
			cin >> username;

			current_user = *usersDAO.getUserByUsername(username);

			match = current_user.getUsername() == username;
			if (match) {
				cout << "User login successful!" << endl;
			}
			else {
				cout << "User login failed or user not found" << endl;
			}

			break;
		case 1:
			cout << "Enter username" << endl;
			cin >> username;
			cout << "Enter full name" << endl;
			cin >> full_name;
			cout << "Enter email" << endl;
			cin >> email;
			cout << "Enter role" << endl;
			cin >> role;

			user = User(0, username, full_name, email, role);
			//ID should be auto generated by mysql

			// Create user
			usersDAO.create(user);

			// fetch and verify created user
			current_user = *usersDAO.getUserByUsername(username);

			match = current_user.getUsername() == username;
			if (match) {
				cout << "User created successfuly!" << endl;
			}
			else {
				cout << "User creation failed" << endl;
			}

			break;
		default:
			break;
		}

	}

	while (true) {
		cout << "Project Menu:" << endl;
		cout << "1. Create a new project" << endl;
		cout << "2. View existing projects" << endl;
		cout << "3. Select a project" << endl;
		cout << "4. Logout" << endl;
		cin >> userChoice;

		if (userChoice == 4) {
			isAuthenticated = false;
			return 0;
		}
		else {
			string projectName;
			vector<shared_ptr<Project>> projects;
			switch (userChoice) {
			case 3:
				int projectId;
				cout << "Enter the project ID: ";
				cin >> projectId;
				cout << endl;
				current_project = *projectDAO.getProject(projectId);

			case 2:
				projects = projectDAO.list();
				cout << "PROJECTS\n";
				for (int i = 0; i < projects.size(); i++) {
					projects = projectDAO.list();
					Project temp = *projects[i].get();
					cout << temp.getId() << endl;
					cout << temp.getName() << endl;
				}
				cout << endl;

			case 1:
				cout << "Enter the project name: ";
				cin >> projectName;
				cout << endl;
				Project p = Project(0, projectName);
				current_project = *projectDAO.create(p);

			}
			// if valid project selected:
			if (current_project.getName() != "") {
				cout << "Valid project selected" << endl;
				break;
			}
			else {
				cout << "Error selecting project" << endl;
			}
		}

		

		while (true) {
			cout << "Board Menu:" << endl;
			cout << "1. Create a Kanban board" << endl;
			cout << "2. View kanban boards" << endl;
			cout << "3. Select a kanban board" << endl;
			cout << "4. Back to Project Menu" << endl;
			cin >> userChoice;

			if (userChoice == 4) {
				break;
			}
			else {
				int boardId, projectId;
				vector<shared_ptr<KanbanBoard>> boards;
				switch (userChoice) {
				case 3:
					cout << "Enter the board ID: ";
					cin >> boardId;
					cout << endl;
					current_board = *kanbanBoardsDAO.getBoard(boardId);

				case 2:
					cout << "Enter the project ID: ";
					cin >> projectId;
					cout << endl;
					boards = kanbanBoardsDAO.list(projectId);
					cout << "BOARDS\n";
					for (int i = 0; i < boards.size(); i++) {
						KanbanBoard temp = *boards[i].get();
						cout << temp.getId() << endl;
						cout << temp.getName() << endl;
						cout << "Started " << temp.getStartDate() << endl;
						cout << "Ends " << temp.getEndDate() << endl;
						cout << "Belongs to project " << temp.getProjectId() << endl;
					}
					cout << endl;

				case 1:
					string name, startDate, endDate;

					cout << "Enter the board name: ";
					cin >> name;
					cout << endl;

					cout << "Enter the start date of the board (format: DD/MM/YYYY): ";
					cin >> startDate;
					cout << endl;

					cout << "Enter the end of the board (format: DD/MM/YYYY): ";
					cin >> endDate;
					cout << endl;

					cout << "Enter the project ID the board will belong to: ";
					cin >> projectId;
					cout << endl;

					KanbanBoard board = KanbanBoard(0, name, projectId, startDate, endDate);
					current_board = *kanbanBoardsDAO.create(board);

				}
				// if valid project selected:
				if (current_board.getName() != "") {
					cout << "Valid kanban board selected" << endl;
					break;
				}
				else {
					cout << "Error selecting kanban board" << endl;
				}

				// get list of users
				// assign team lead

			}

			while (true) {
				cout << "Board columns Menu:" << endl;
				cout << "1. View columns with issues" << endl;
				cout << "2. Select a column" << endl;
				cout << "3. Back to boards Menu" << endl;
				cin >> userChoice;

				if (userChoice == 3) {
					break;
				}
				else {
					KanbanColumn c;
					vector<shared_ptr<KanbanColumn>> columns;
					switch (userChoice) {
					case 2:
						int columnId;
						cout << "Enter the column ID: ";
						cin >> columnId;
						cout << endl;

						c = *kanbanColumnsDAO.getColumn(columnId);

					case 1:
						int boardId;
						cout << "Enter the board ID: ";
						cin >> boardId;
						cout << endl;

						columns = kanbanColumnsDAO.list(boardId);
						cout << "COLUMNS\n";
						for (int i = 0; i < columns.size(); i++) {
							KanbanColumn temp = *columns[i].get();
							cout << temp.getName() << endl;
							cout << "Found at board " << temp.getBoardId() << endl;
							cout << temp.getPosition() << endl;
						}
						cout << endl;
					}
				}

				//if valid column selected:

				while (true) {
					cout << "Issues Menu:" << endl;
					cout << "1. Create an issue" << endl;
					cout << "2. View issues" << endl;
					cout << "3. Edit an issue" << endl;
					cout << "4. Delete an issue" << endl;
					cout << "5. Update issue status" << endl; // or move column
					cout << "6. Assign issue to a team member" << endl;
					cout << "7. Set priority for an issue" << endl;
					cout << "8. Set estimate for an issue" << endl;
					cout << "9. Back to Board Menu" << endl;
					cin >> userChoice;

					IssuesDAO issuesDAO(db);

					if (userChoice == 9) {
						break;
					}
					else {
						int issueId;
						switch (userChoice) {
						case 1: {
							// Create an issue
							std::string summary, description, status, priority;
							int assignee, project_id, issue_type, column_id;
							float estimate;

							cout << "Enter the issue summary: ";
							cin.ignore();
							getline(cin, summary);

							cout << "Enter the issue description: ";
							getline(cin, description);

							cout << "Enter the issue status: ";
							cin >> status;

							cout << "Enter the issue priority: ";
							cin >> priority;

							cout << "Enter the assignee ID (0 if unassigned): ";
							cin >> assignee;

							cout << "Enter the project ID: ";
							cin >> project_id;

							cout << "Enter the issue type ID: ";
							cin >> issue_type;

							cout << "Enter the column ID: ";
							cin >> column_id;

							cout << "Enter the issue estimate: ";
							cin >> estimate;

							Issues issue(0, summary, description, status, priority, assignee, project_id, issue_type, column_id, estimate);
							issuesDAO.createIssue(issue);
							cout << "Issue created with ID: " << issue.getIssueId() << endl;
							break;
						}
						case 2: {
							// View issues
							int project_id;
							cout << "Enter the project ID: ";
							cin >> project_id;

							std::vector<std::shared_ptr<Issues>> issuesList = issuesDAO.listIssues(project_id);
							for (const auto& issue : issuesList) {
								cout << "Issue ID: " << issue->getIssueId() << ", Summary: " << issue->getSummary() << ", Status: " << issue->getStatus() << endl;
							}
							break;
						}
						case 3: {
							// Edit an issue
							int issue_id;
							cout << "Enter the issue ID to edit: ";
							cin >> issue_id;

							std::shared_ptr<Issues> issue = issuesDAO.getIssueById(issue_id);
							if (issue) {
								std::string new_summary, new_description;
								cin.ignore();
								cout << "Enter the new summary (leave empty to keep the current summary): ";
								getline(cin, new_summary);

								cout << "Enter the new description (leave empty to keep the current description): ";
								getline(cin, new_description);

								if (!new_summary.empty()) {
									issue->setSummary(new_summary);
								}
								if (!new_description.empty()) {
									issue->setDescription(new_description);
								}

								issuesDAO.updateIssue(*issue);
								cout << "Issue updated successfully." << endl;
							}
							else {
								cout << "Issue not found." << endl;
							}
							break;
						}
						case 4: {
							// Delete an issue
							int issue_id;
							cout << "Enter the issue ID to delete: ";
							cin >> issue_id;

							issuesDAO.deleteIssue(issue_id);
							cout << "Issue deleted successfully." << endl;
							break;
						}
						case 5: {
							// Update issue status
							int issue_id;
							std::string new_status;
							cout << "Enter the issue ID to update the status: ";
							cin >> issue_id;

							cout << "Enter the new status: ";
							cin >> new_status;

							std::shared_ptr<Issues> issue = issuesDAO.getIssueById(issue_id);
							if (issue) {
								issue->setStatus(new_status);
								issuesDAO.updateIssue(*issue);
								cout << "Issue status updated successfully." << endl;
							}
							else {
								cout << "Issue not found." << endl;
							}
							break;
						}
						case 6: {
							// Assign issue to a team member
							int issue_id, new_assignee;
							cout << "Enter the issue ID to assign: ";
							cin >> issue_id;

							cout << "Enter the new assignee ID: ";
							cin >> new_assignee;

							std::shared_ptr<Issues> issue = issuesDAO.getIssueById(issue_id);
							if (issue) {
								issue->setAssignee(new_assignee);
								issuesDAO.updateIssue(*issue);
								cout << "Issue assigned successfully." << endl;
							}
							else {
								cout << "Issue not found." << endl;
							}
							break;
						}
						case 7: {
							// Set priority for an issue
							int issue_id;
							std::string new_priority;
							cout << "Enter the issue ID to set priority: ";
							cin >> issue_id;

							cout << "Enter the new priority: ";
							cin >> new_priority;

							std::shared_ptr<Issues> issue = issuesDAO.getIssueById(issue_id);
							if (issue) {
								issue->setPriority(new_priority);
								issuesDAO.updateIssue(*issue);
								cout << "Issue priority updated successfully." << endl;
							}
							else {
								cout << "Issue not found." << endl;
							}
							break;
						}
						case 8: {
							// Set estimate for an issue
							int issue_id;
							float new_estimate;
							cout << "Enter the issue ID to set estimate: ";
							cin >> issue_id;

							cout << "Enter the new estimate: ";
							cin >> new_estimate;

							std::shared_ptr<Issues> issue = issuesDAO.getIssueById(issue_id);
							if (issue) {
								issue->setEstimate(new_estimate);
								issuesDAO.updateIssue(*issue);
								cout << "Issue estimate updated successfully." << endl;
							}
							else {
								cout << "Issue not found." << endl;
							}
							break;
						}
						default:
							cout << "Invalid choice. Please try again." << endl;
						}
					}
				}

				
			}
		}
	}

	return 0;
}